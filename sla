#!/bin/bash

set +x

# sla: the Simple Little Automator.
#
# A replacement for 'make' for projects that don't require incremental
# compilation, such as scripting languages.
#
# Author: Ferry Boender
# Homepage: https://github.com/fboender/sla
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# For the full license, see the LICENSE file.

VERSION=1.0
RULES_FILE="build.sla"

if [ -t 1 ] && [ ! -z "$TERM" ] && [ "$TERM" != "dumb" ]; then
    # Our output is not being redirected and we have a terminal, so we can use
    # colors.
    C_RED="\033[1;31m"
    C_GREEN="\033[1;32m"
    C_WHITE="\033[1;37m"
    C_RESET="$(tput sgr0)"
fi

#
# Display debug message if FLAG_DEBUG is set (-d, --debug)
#
msg_debug () {
    [ "$FLAG_DEBUG" -eq 1 ] && echo "DEBUG: $*" >&2
}

#
# Print error message to stderr and exit with code 2
#
die () {
    printf "${C_RED}%s$C_RESET\n" "$*" >&2
    exit 2
}

#
# Print okay message to stdout
#
okay () {
    printf "${C_GREEN}%s$C_RESET\n" "$*" >&2
}

#
# Display usage message
#
usage () {
    echo "Usage: sla [-hdv] [--version] <rule> [param [param...]]"
    echo "Simple Little Automator. Find and execute tasks from a shell script."
    echo
    echo "Arguments:"
    echo "  -h, --help      Show this help message"
    echo "  -d, --debug     Show debug information"
    echo "  -v, --verbose   Verbose output"
    echo "  -V, --version   Show sla version"
    echo
    echo "If no <rule> is specified, lists the available rules"
    exit 1
}

#
# Display version
#
version () {
    echo "v$VERSION"
    exit 1
}

#
# Keep going down a directory from the current directory until we find a
# rules file or reach the root dir. Print the directory containing the rules
# file.
#
find_project_root () {
    PROJ_ROOT="$(realpath .)"
    while true; do
        msg_debug "Testing \"$PROJ_ROOT/$RULES_FILE\""
        if [ -f "$PROJ_ROOT/$RULES_FILE" ]; then
            # Found a $RULES_FILE file. Return it
            msg_debug "$RULES_FILE found at $PROJ_ROOT"
            echo "$PROJ_ROOT"
            break
        elif [ "$PROJ_ROOT" = "/" ]; then
            # Reached the root dir. Return empty string.
            echo ""
            break
        else
            # Go one dir up
            PROJ_ROOT="$(realpath "$PROJ_ROOT"/..)"
        fi
    done
}

#
# Print a list of rules found in the rules file
#
get_rules () {
    grep -E '^[^_ #]\w*\s+\(\s*\)\s*\{' "$PROJ_ROOT/$RULES_FILE" | sed "s/^\(.*\)[[:space:]]*(.*/\\1/"
}

#
# Return the line with the first comment inside a rule
#
get_rule_desc () {
    RULE="$1"
    DOC_LINE="$(grep -A1 -E "^$RULE\s?\(\)\s?\{" "$PROJ_ROOT/$RULES_FILE" | grep -E "^[ 	]*#")"

    if [ ! -z "$DOC_LINE" ]; then
        # shellcheck disable=SC2001
        echo "$DOC_LINE" | sed "s/^[ 	]*#[ 	]*//"
    fi
}

#
# List rules found in the rules found
#
list_rules () {
    RULES="$(get_rules)"
    echo "Available rules:"
    for RULE in $RULES; do
        RULE_DESC="$(get_rule_desc "$RULE")"
        if [ -z "$RULE_DESC" ]; then
            printf " - ${C_WHITE}%s$C_RESET\n" "$RULE"
        else
            printf " - ${C_WHITE}%s$C_RESET: %s\n" "$RULE" "$RULE_DESC"
        fi
    done
}

#
# Convert seconds to human readable duration (1h 8m 5s)
#
sec_to_human () {
    SECONDS="$1"
    HOURS=$(( SECONDS / 3600))
    SECONDS=$(( SECONDS % 3600))
    MINUTES=$(( SECONDS / 60))
    SECONDS=$(( SECONDS % 60))
    ELAPSED_TIME="${HOURS}h ${MINUTES}m ${SECONDS}s"
    echo "$ELAPSED_TIME"
}

# Handle commandline arguments
FLAG_DEBUG=0
FLAG_VERBOSE=0
RULE=""

while true; do
    case "$1" in
        "-h" | "--help")
            usage
            ;;
        "-V"|"--version")
            version
            ;;
        "-d" | "--debug")
            FLAG_DEBUG=1
            shift
            ;;
        "-v" | "--verbose")
            FLAG_VERBOSE=1
            shift
            ;;
        *)
            break
            ;;
    esac
done

# Find the project root (dir where build.sla is)
PROJ_ROOT="$(find_project_root)"
if [ -z "$PROJ_ROOT" ]; then
    die "No $RULES_FILE found"
fi

if [ "$#" = 0 ]; then
    list_rules
    exit 1
fi

RULE="$1"
shift;

# Check that the requested rule exists
get_rules | grep "$RULE" > /dev/null || die "Rule '$RULE' not found"

msg_debug "FLAG_VERBOSE: $FLAG_VERBOSE"
msg_debug "PROJ_ROOT: $PROJ_ROOT"
msg_debug "RULE: $RULE"
msg_debug "PARAMS:" "$@"

# Include and run the requested rule. Runs in subshell so get back exit code if
# execution fails with "set -e"
TIME_START="$(date +"%s")"
(
    # Jump to project root
    cd "$PROJ_ROOT"

    # Source the rules file and execute the requested rule
    # shellcheck source=/dev/null
    source "$PROJ_ROOT/$RULES_FILE"

    if [ "$FLAG_VERBOSE" -eq 1 ]; then
        # Show all commands being execute
        set -x
    fi
    set -e  # Fail on errors immediately
    $RULE "$@"
)
EXIT_CODE=$?
set +x

# Calculate duration
TIME_END="$(date +"%s")"
ELAPSED=$(( TIME_END - TIME_START ))
ELAPSED_HUMAN="$(sec_to_human $ELAPSED)"

if [ $EXIT_CODE -ne 0 ]; then
    die "Execution of rule '$RULE' failed with exitcode $EXIT_CODE. Duration: $ELAPSED_HUMAN"
else
    okay "Execution of rule '$RULE' succeeded with exitcode $EXIT_CODE. Duration: $ELAPSED_HUMAN"
fi
